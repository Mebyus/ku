fun dec_digit(x: u8) => u8 {
	ret x + #tint(u8, '0');
}

fun hex_digit(x: u8) => u8 {
	if x <= 9 {
		ret dec_digit(x);
	}
	ret x - 10 + #tint(u8, 'A');
}

fun unsafe_hex_byte(buf: []u8, x: u8) => uint {
  	buf.ptr.[0] = hex_digit(x >> 4);
	buf.ptr.[1] = hex_digit(x & 0xF);
	ret 2;
}

let max_u16_hex_length: uint = 4;

/*/doc

Formats a given u16 integer as a hexadecimal number of
fixed width (=4) format, prefixing significant digits with
zeroes if necessary. Buffer must be at least 4 bytes
long.

Returns number of bytes written to buffer (always 4).
*/
fun unsafe_hex_prefix_zeroes_u16(buf: []u8, x: u16) => uint {
	var i: uint = max_u16_hex_length;
	// digits are written from least to most significant bit
	for i != 0 {
		i -= 1;
		let n: u8 = #cast(u8, x & 0xF);
		buf.ptr.[i] = hex_digit(n);
		x = x >> 4;
	}

	ret max_u16_hex_length;
}

fun hex_prefix_zeroes_u16(buf: []u8, x: u16) => uint {
	if buf.len < max_u16_hex_length {
		ret 0;
	}
	must(buf.ptr != nil);

	ret unsafe_hex_prefix_zeroes_u16(buf, x);
}

let max_u64_hex_length: uint = 16;

/*/doc

Formats a given u64 integer as a hexadecimal number of
fixed width (=16) format, prefixing significant digits with
zeroes if necessary. Buffer must be at least 16 bytes
long.

Returns number of bytes written to buffer (always 16).
*/
fun unsafe_hex_prefix_zeroes_u64(buf: []u8, x: u64) => uint {
	var i: uint = max_u64_hex_length;
	// digits are written from least to most significant bit
	for i != 0 {
		i -= 1;
		let n: u8 = #cast(u8, x & 0xF);
		buf.ptr.[i] = hex_digit(n);
		x = x >> 4;
	}

	ret max_u64_hex_length;
}

fun hex_prefix_zeroes_u64(buf: []u8, x: u64) => uint {
	if buf.len < max_u64_hex_length {
		ret 0;
	}
	must(buf.ptr != nil);

	ret unsafe_hex_prefix_zeroes_u64(buf, x);
}

/*/doc

Puts decimal digits of a number in reverse order inside an array of bytes.
Returns number of digits written.

Array must have enough space to hold produced bytes.

To clarify: last (least significant) digit is placed at ptr.[0].
*/
fun unsafe_reverse_dec_u64(ptr: [*]u8, x: u64) => uint {
	var i: uint = 0;
	for {
		let n: u8 = #tint(u8, x % 10);
		x /= 10;
		ptr.[i] = dec_digit(n);
		i += 1;
		if x == 0 {
			ret i;
		}
	}
}

let max_u64_dec_length: uint = 20;

/*/doc

Same as fmt_dec_u64, but has no buffer boundary checks.
*/
fun unsafe_dec_u64(buf: []u8, x: u64) => uint {
	var digits: [max_u64_dec_length]u8 = ?;
	let len: uint = unsafe_reverse_dec_u64(digits.ptr, x);
	mem.unsafe_reverse_copy(buf.ptr, digits.ptr, len);
	ret len;
}

/*/doc

Puts integer x into a given buffer as text in decimal format.

Returns number of bytes written. Returns 0 if buffer does not
have enough bytes for the operation.
*/
fun dec_u64(buf: []u8, x: u64) => uint {
	if buf.len == 0 {
		ret 0;
	}
	must(buf.ptr != nil);
	
	if buf.len >= max_u64_dec_length {
		ret unsafe_dec_u64(buf, x);
	}
	
	var digits: [max_u64_dec_length]u8 = ?;
	let len: uint = unsafe_reverse_dec_u64(digits.ptr, x);
	if len > buf.len {
		// Not enough space in buffer to represent integer.
		ret 0;
	}

	mem.unsafe_reverse_copy(buf.ptr, digits.ptr, len);
	ret len;
}

fun dec_s64(buf: []u8, x: s64) => uint {
	if x >= 0 {
		ret dec_u64(buf, #cast(u64, x));
	}

	if buf.len < 2 {
		ret 0;
	}

	let n: uint = dec_u64(buf[1:], #cast(u64, -x));
	if n == 0 {
		ret 0;
	}
	buf.ptr.[0] = '-';
	ret n + 1;
}
