let LOG_LEVEL_FATAL => 0;
let LOG_LEVEL_ERROR => 1;
let LOG_LEVEL_WARN  => 2;
let LOG_LEVEL_INFO  => 3;
let LOG_LEVEL_DEBUG => 4;

let LOG_BUFFER_SIZE => 1 << 14;

/*/doc
Encapsulates buffered writes to an opened file.

Related:
    +init_log_sink(...)
    .log_sink_write(...)
    .log_sink_flush(...)
*/
type LogSink => struct {
    buf: [LOG_BUFFER_SIZE]u8,

    // Value returned by clock when sink was initialized.
    start: TimeDur,

    // Write position for buffer. Corresponds to number of bytes
    // currently stored in buffer.
    pos: uint,

    // File descriptor of log file. Flush is nop if this field is 0.
    fd: uint,
}

/*/doc
Init log sink with a given file descriptor. It must be open for writes
in order for logger to work properly.
*/
fun init_log_sink_from_fd(sink: *LogSink, fd: uint) {
    sink.*.fd = fd;
    sink.*.pos = 0;
    sink.*.start = clock_mono();
}

fun init_log_sink(sink: *LogSink, path: str) {
    #must(LOG_BUFFER_SIZE >= 1024);
    must(path.len != 0);

   const r: RetOpen = os_create(path);
    if r.eid != 0 {
        init_log_sink_from_fd(sink, 0);
        ret;
    }

    init_log_sink_from_fd(sink, r.fd);
}

fun log_sink_buffer_full(sink: *LogSink) => bool {
    ret sink.*.pos >= LOG_BUFFER_SIZE;
}


/*/doc
Returns length (in bytes) of buffer tail (unoccupied portion).
*/
fun log_sink_buffer_left(sink: *LogSink) => uint {
    ret LOG_BUFFER_SIZE - sink.*.pos;
}

fun log_sink_buffer_tail(sink: *LogSink) => []u8 {
    ret make_span_u8(sink.*.buf + sink.*.pos, log_sink_buffer_left(sink));
}

fun log_sink_buffer_head(sink: *LogSink) => []u8 {
    ret make_span_u8(sink.*.buf, sink.*.pos);
}

fun log_sink_file_write(sink: *LogSink, s: []u8) {
    if sink.*.fd == 0 {
        ret;
    }

    os_linux_write_all(sink.*.fd, s);
}

fun log_sink_file_close(sink: *LogSink) {
    if sink.*.fd == 0 {
        ret;
    }
    
    os_linux_close(sink.*.fd);
}

fun log_sink_flush(sink: *LogSink) {
    log_sink_file_write(sink, log_sink_buffer_head(sink));
    sink.*.pos = 0;
}

/*/doc
Flushes log buffer if it is full. Does nothing otherwise.
*/
fun log_sink_check_flush(sink: *LogSink) {
    if !log_sink_buffer_full(sink) {
        ret;
    }
    log_sink_flush(sink);
}

/*/doc
Flushes log buffer if less then specified number of unoccupied bytes left.
Does nothing otherwise.
*/
fun log_sink_threshold_flush(sink: *LogSink, threshold: uint) {
    if log_sink_buffer_left(sink) < threshold {
        log_sink_flush(sink);
    }
}

fun log_sink_close(sink: *LogSink) {
    log_sink_flush(sink);
    log_sink_file_close(sink);
}

fun log_sink_write(sink: *LogSink, s: str) {
    if s.len >= (LOG_BUFFER_SIZE / 2) {
        // avoid copies for large strings
        log_sink_flush(sink);
        log_sink_file_write(sink, s);
        ret;
    }

    var i: uint = 0; // number of bytes from s written
    for i < s.len {
        log_sink_check_flush(sink);

        const tail: []u8 = log_sink_buffer_tail(sink);
        const n: uint = copy(tail, str_slice_tail(s, i));
        i += n;
        sink.*.pos += n;
    }
}

fun log_sink_put_byte(sink: *LogSink, x: u8) {
    log_sink_check_flush(sink);

    var tail: []u8 = log_sink_buffer_tail(sink);
    tail.ptr.[0] = x;
    sink.*.pos += 1;
}

fun log_sink_put_newline(sink: *LogSink) {
    log_sink_put_byte(sink, '\n');
}

fun log_sink_put_space(sink: *LogSink) {
    log_sink_put_byte(sink, ' ');
}

fun log_sink_format_logger_name(sink: *LogSink, name: str) {
    if name.len == 0 {
        ret;
    }

    log_sink_put_byte(sink, '(');
    log_sink_write(sink, name);
    log_sink_put_byte(sink, ')');
    log_sink_put_space(sink);
}

fun log_sink_format_hex_byte(sink: *LogSink, x: u8) {
    log_sink_threshold_flush(sink, fmt_hex_byte_length);

    var tail: []u8 = log_sink_buffer_tail(sink);
    unsafe_fmt_hex_byte(tail.ptr, x);
    sink.*.pos += fmt_hex_byte_length;
}

fun log_sink_format_dec_u64(sink: *LogSink, x: u64) {
    log_sink_threshold_flush(sink, max_u64_fmt_dec_length);

    var tail: []u8 = log_sink_buffer_tail(sink);
    const n: uint = unsafe_fmt_dec_u64(tail.ptr, x);
    sink.*.pos += n;
}

fun log_sink_format_dec_s64(sink: *LogSink, x: s64) {
    log_sink_threshold_flush(sink, max_s64_fmt_dec_length);

    var tail: []u8 = log_sink_buffer_tail(sink);
    const n: uint = unsafe_fmt_dec_s64(tail.ptr, x);
    sink.*.pos += n;
}

fun log_sink_format_str(sink: *LogSink, s: str) {
    log_sink_put_byte(sink, '"');
    log_sink_write(sink, s);
    log_sink_put_byte(sink, '"');
}

fun log_sink_format_ptr(sink: *LogSink, ptr: *any) {
    const fmt_ptr_length: uint = 2 + 16; // 0x + hex number
    log_sink_threshold_flush(sink, fmt_ptr_length);

    var tail: []u8 = log_sink_buffer_tail(sink);
    tail.ptr.[0] = '0';
    tail.ptr.[1] = 'x';
    unsafe_fmt_hex_prefix_zeroes_u64(tail.ptr + 2, cast(u64, ptr));
    sink.*.pos += fmt_ptr_length;
}

fun log_sink_format_bytes(sink: *LogSink, s: []u8) {
    log_sink_put_byte(sink, '[');
    if s.len == 0 {
        log_sink_put_byte(sink, ']');
        ret;
    }

    log_sink_format_hex_byte(sink, s.ptr.[0]);
    for i = [1:s.len] {
        log_sink_put_byte(sink, ',');
        log_sink_put_space(sink);
        log_sink_format_hex_byte(sink, s.ptr.[i]);
    }
    log_sink_put_byte(sink, ']');
}

fun log_sink_format_span_s64(sink: *LogSink, s: []s64) {
    log_sink_put_byte(sink, '[');
    if s.len == 0 {
        log_sink_put_byte(sink, ']');
        ret;
    }

    log_sink_format_dec_s64(sink, s.ptr.[0]);
    for i = [1:s.len] {
        log_sink_put_byte(sink, ',');
        log_sink_put_space(sink);
        log_sink_format_dec_s64(sink, s.ptr.[i]);
    }
    log_sink_put_byte(sink, ']');
}

fun log_sink_format_clock(sink: *LogSink) {
    const sub: TimeDur = time_dur_sub(clock_mono(), sink.*.start);

    log_sink_threshold_flush(sink, max_time_dur_fmt_micro_length);
    var tail: []u8 = log_sink_buffer_tail(sink);
    const n: uint = unsafe_fmt_time_dur_micro(tail.ptr, sub);
    sink.*.pos += n;

    log_sink_put_space(sink);
}

let LOG_FIELD_U64 => 0;
let LOG_FIELD_S64 => 1;
let LOG_FIELD_STR => 2;
let LOG_FIELD_PTR => 3;

let LOG_FIELD_SPAN_S64 => 4;

let LOG_FIELD_BYTES => 5;

type LogFieldValue => union {
    u64: u64,
    s64: s64,
    str: str,

    span_s64: []s64,

    bytes: []u8,

    ptr: *any,
}

type LogField => struct {
    val: LogFieldValue,

    name: str,
    kind: u8,
}

fun log_field_u64(name: str, value: u64) => LogField {
    var field: LogField;
    field.val.u64 = value;
    field.name = name;
    field.kind = LOG_FIELD_U64;
    ret field;
}

fun log_field_s64(name: str, value: s64) => LogField {
    var field: LogField;
    field.val.s64 = value;
    field.name = name;
    field.kind = LOG_FIELD_S64;
    ret field;
}

fun log_field_str(name: str, value: str) => LogField {
    var field: LogField;
    field.val.str = value;
    field.name = name;
    field.kind = LOG_FIELD_STR;
    ret field;
}

fun log_field_ptr(name: str, value: *any) => LogField {
    var field: LogField;
    field.val.ptr = value;
    field.name = name;
    field.kind = LOG_FIELD_PTR;
    ret field;    
}

fun log_field_bytes(name: str, value: []u8) => LogField {
    var field: LogField;
    field.val.bytes = value;
    field.name = name;
    field.kind = LOG_FIELD_BYTES;
    ret field;
}

fun log_field_span_s64(name: str, value: []s64) => LogField {
    var field: LogField;
    field.val.span_s64 = value;
    field.name = name;
    field.kind = LOG_FIELD_SPAN_S64;
    ret field;
}

type span_LogField => struct {
    ptr: [*]LogField,
    len: uint,
}

fun make_span_log_field(ptr: [*]LogField, len: uint) => []LogField {
    var s: []LogField;
    if len == 0 {
        ret s;
    }

    s.ptr = ptr;
    s.len = len;
    ret s;
}

fun log_sink_format_field_value(sink: *LogSink, kind: u8, value: LogFieldValue) {
    if kind
    => LOG_FIELD_U64 { log_sink_format_dec_u64(sink, value.u64); }
    => LOG_FIELD_S64 { log_sink_format_dec_s64(sink, value.s64); }
    => LOG_FIELD_STR { log_sink_format_str(sink, value.str); }
    => LOG_FIELD_PTR { log_sink_format_ptr(sink, value.ptr); }
    => LOG_FIELD_SPAN_S64 { log_sink_format_span_s64(sink, value.span_s64); }
    => LOG_FIELD_BYTES { log_sink_format_bytes(sink, value.bytes); }
    else { #never; }
}

fun log_sink_format_field(sink: *LogSink, field: LogField) {
    log_sink_write(sink, field.name);
    log_sink_put_byte(sink, ':');
    log_sink_put_space(sink);
    log_sink_format_field_value(sink, field.kind, field.val);
}

fun log_sink_format_message_field(sink: *LogSink, field: LogField) {
    log_sink_put_byte(sink, '{');
    log_sink_format_field(sink, field);
    log_sink_put_byte(sink, '}');
}

fun log_sink_format_message_fields(sink: *LogSink, fields: []LogField) {
    must(fields.len != 0);

    log_sink_put_byte(sink, '{');
    log_sink_format_field(sink, fields.ptr.[0]);
    for i = [1:fields.len] {
        log_sink_put_byte(sink, ',');
        log_sink_put_space(sink);
        log_sink_format_field(sink, fields.ptr.[i]);
    }
    log_sink_put_byte(sink, '}');
}

type Logger => struct {
    // Short descriptive name of the logger.
    // It will be automatically added to every log message.
    name: str,

    sink: *LogSink,

    level: u8,
}

/*/doc
Do not reorder elements in this array. It is tied to log level constants.
*/
const log_prefix_table: [_]str = [
    "[fatal] ",
    "[error] ",
    " [warn] ",
    " [info] ",
    "[debug] ",
];

fun init_log(lg: *Logger, sink: *LogSink, level: u8) {
    lg.*.name = "";
    lg.*.sink = sink;
    lg.*.level = level;
}

/*/doc
Create a new named logger with the same sink and level as the given one.
*/
fun log_spawn(lg: *Logger, name: str) => Logger {
    var l: Logger = {
        name: name,
        sink: lg.*.sink,
        level: lg.*.level,
    };
    ret l;
}

fun log_message_body(lg: *Logger, level: u8,  s: str) {
    log_sink_format_clock(lg.*.sink);
    log_sink_write(lg.*.sink, log_prefix_table.[level]);
    log_sink_format_logger_name(lg.*.sink, lg.*.name);
    log_sink_write(lg.*.sink, s);
}

fun log_message(lg: *Logger, level: u8, s: str) {
    if level > lg.*.level {
        ret;
    }

    log_message_body(lg, level, s);
    log_sink_put_newline(lg.*.sink);
}

fun log_message_field(lg: *Logger, level: u8, s: str, field: LogField) {
    if level > lg.*.level {
        ret;
    }

    log_message_body(lg, level, s);
    log_sink_put_space(lg.*.sink);
    log_sink_format_message_field(lg.*.sink, field);
    log_sink_put_newline(lg.*.sink);
}

fun log_message_field2(lg: *Logger, level: u8, s: str, f1: LogField, f2: LogField) {
    if level > lg.*.level {
        ret;
    }

    var fields: [_]LogField = [f1, f2];

    log_message_body(lg, level, s);
    log_sink_put_space(lg.*.sink);
    log_sink_format_message_fields(lg.*.sink, make_span_log_field(fields, 2));
    log_sink_put_newline(lg.*.sink);
}

fun log_message_field3(lg: *Logger, level: u8, s: str, f1: LogField, f2: LogField, f3: LogField) {
    if level > lg.*.level {
        ret;
    }

    var fields: [_]LogField = [f1, f2, f3];

    log_message_body(lg, level, s);
    log_sink_put_space(lg.*.sink);
    log_sink_format_message_fields(lg.*.sink, make_span_log_field(fields, 3));
    log_sink_put_newline(lg.*.sink);
}

fun log_message_fields(lg: *Logger, level: u8, s: str, fields: []LogField) {
    if level > lg.*.level {
        ret;
    }

    log_message_body(lg, level, s);
    log_sink_put_space(lg.*.sink);
    log_sink_format_message_fields(lg.*.sink, fields);
    log_sink_put_newline(lg.*.sink);
}

fun log_debug(lg: *Logger, s: str) {
    log_message(lg, LOG_LEVEL_DEBUG, s);
}

fun log_info(lg: *Logger, s: str) {
    log_message(lg, LOG_LEVEL_INFO, s);
}

fun log_warn(lg: *Logger, s: str) {
    log_message(lg, LOG_LEVEL_WARN, s);
}

fun log_error(lg: *Logger, s: str) {
    log_message(lg, LOG_LEVEL_ERROR, s);
}

fun log_debug_field(lg: *Logger, s: str, field: LogField) {
    log_message_field(lg, LOG_LEVEL_DEBUG, s, field);
}

fun log_debug_field2(lg: *Logger, s: str, f1: LogField, f2: LogField) {
    log_message_field2(lg, LOG_LEVEL_DEBUG, s, f1, f2);
}

fun log_debug_fields(lg: *Logger, s: str, fields: []LogField) {
    log_message_fields(lg, LOG_LEVEL_DEBUG, s, fields);
}

fun log_info_field(lg: *Logger, s: str, field: LogField) {
    log_message_field(lg, LOG_LEVEL_INFO, s, field);
}

fun log_info_fields(lg: *Logger, s: str, fields: []LogField) {
    log_message_fields(lg, LOG_LEVEL_INFO, s, fields);
}

fun log_warn_field(lg: *Logger, s: str, field: LogField) {
    log_message_field(lg, LOG_LEVEL_WARN, s, field);
}

fun log_warn_fields(lg: *Logger, s: str, fields: []LogField) {
    log_message_fields(lg, LOG_LEVEL_WARN, s, fields);
}

fun log_error_field(lg: *Logger, s: str, field: LogField) {
    log_message_field(lg, LOG_LEVEL_ERROR, s, field);
}

fun log_error_field2(lg: *Logger, s: str, f1: LogField, f2: LogField) {
    log_message_field2(lg, LOG_LEVEL_ERROR, s, f1, f2);
}

fun log_error_field3(lg: *Logger, s: str, f1: LogField, f2: LogField, f3: LogField) {
    log_message_field3(lg, LOG_LEVEL_ERROR, s, f1, f2, f3);
}

fun log_error_fields(lg: *Logger, s: str, fields: []LogField) {
    log_message_fields(lg, LOG_LEVEL_ERROR, s, fields);
}
